<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ohnal.chap.mapper.BoardMapper">

    <sql id="search">
        <if test="search.keyword == ''">
            ORDER BY reg_date DESC
        </if>
        <if test="search.keyword == 'last'">
            ORDER BY reg_date DESC
        </if>
        <if test="search.keyword == 'view'">
            ORDER BY view_count DESC
        </if>
        <if test="search.keyword == 'reply'">
            ORDER BY reply_count DESC
        </if>
        <if test="search.keyword == 'like'">
            ORDER BY like_count DESC
        </if>
    </sql>

    <select id="findAll" resultType="board">
        SELECT
            A.*, B.profile_image, B.nickname, C.like_no, C.like_email
        FROM tbl_board A
        LEFT OUTER JOIN tbl_member B
        ON A.email = B.email
        LEFT OUTER JOIN tbl_like C
        ON A.board_no = C.board_no AND C.like_email = #{email}
        <include refid="search" />
        LIMIT #{search.pageStart}, #{search.amount}
    </select>

    <select id="getCount" resultType="int">
        SELECT COUNT(*)
        FROM tbl_board
    </select>

    <insert id="save">
        INSERT INTO tbl_board (
            content, image, location_tag, weather_tag, email
        )
        VALUES (
            #{content}, #{image}, #{locationTag}, #{weatherTag}, #{email}
        )
    </insert>

    <select id="findOne" resultType="board">
        SELECT
            A.*, B.nickname, B.profile_image
        FROM tbl_board A
        LEFT OUTER JOIN tbl_member B
        ON A.email = B.email
        WHERE board_no = #{bno}
    </select>

    <update id="updateCount">
        UPDATE tbl_board
        <if test="count == 'view'">
            SET view_count = view_count + 1
        </if>
        <if test="count == 'replies'">
            SET reply_count = reply_count + 1
        </if>
        <if test="count == 'replyDelete'">
            SET reply_count = reply_count - 1
        </if>
        <if test="count == 'likePlus'">
            SET like_count = like_count + 1
        </if>
        <if test="count == 'likeMinus'">
            SET like_count = like_count - 1
        </if>
        WHERE board_no = #{bno}
    </update>
    
    <select id="replyList" resultType="reply">
        SELECT
            A.reply_no, A.content, A.reg_date,
            B.email, B.nickname, B.profile_image
        FROM tbl_reply A
        LEFT OUTER JOIN tbl_member B
        ON A.email = B.email
        WHERE board_no = #{bno}
        ORDER BY reply_no DESC
    </select>

    <insert id="replySave">
        INSERT INTO tbl_reply (
            email, board_no, content
        )
        VALUES (
            #{email}, #{bno}, #{content}
        )
    </insert>



    <!-- my-history 에서 내가 쓴 글 찾아오는 sql문 -->
    <!--    -->
    <select id="findAllByEmail" resultType="board">
        SELECT
        A.*, B.profile_image, B.nickname, C.like_no, C.like_email
        FROM tbl_board A
        LEFT OUTER JOIN tbl_member B
        ON A.email = B.email
        LEFT OUTER JOIN tbl_like C
        ON A.board_no = C.board_no AND C.like_email = #{email}
        WHERE A.email = #{email}
        ORDER BY board_no DESC
        LIMIT #{page.pageStart}, #{page.amount}
    </select>

    <!-- my-history 에서 내가 쓴 글 찾아오는 sql문(버튼버전) -->
    <!--    <select id="myPosts" resultType="board">-->
    <!--        SELECT * FROM tbl_board-->
    <!--        WHERE email = #{email}-->
    <!--        ORDER BY board_no DESC-->
    <!--        LIMIT #{page.pageStart}, #{page.amount}-->
    <!--    </select>-->

    <!-- my-history 에서 내가 쓴 댓글 목록(작성 댓글 버튼 눌렀을 때) 조회시
    사용되는 sql문 (내가 쓴 댓글의 게시물의 목록을 모두 조회한다. -->
    <select id="findMyComments" resultType="board">
        SELECT DISTINCT
        b.*, m.profile_image, m.nickname, l.like_no, l.like_email,
        IF(l.like_email IS NOT NULL, TRUE, FALSE) AS is_liked
        FROM
        tbl_board AS b
        JOIN
        tbl_reply AS r ON b.board_no = r.board_no
        LEFT JOIN
        tbl_like AS l ON b.board_no = l.board_no AND l.like_email = #{email}
        LEFT OUTER JOIN tbl_member m
        ON b.email = m.email
        WHERE
        r.email = #{email}
        LIMIT #{page.pageStart}, #{page.amount}
    </select>



    <!-- my-history 에서 내가 좋아요 누른 글 목록 조회 버튼 눌렀을 때 사용되는 sql문  -->
    <select id="findMyLikePosts" resultType="board">
        SELECT b.*, m.profile_image, m.nickname, r.like_no, r.like_email,
        IF(r.like_email IS NOT NULL, TRUE, FALSE) AS is_liked
        FROM tbl_board AS b
        JOIN tbl_member AS m
        ON b.email = m.email
        LEFT JOIN tbl_like AS r ON b.board_no = r.board_no
        WHERE r.like_email = #{email}
        LIMIT #{page.pageStart}, #{page.amount}
    </select>
    <!--        SELECT-->
    <!--        A.*, B.profile_image, C.like_no, C.like_email-->
    <!--        FROM tbl_board A-->
    <!--        LEFT OUTER JOIN tbl_member B-->
    <!--        ON A.email = B.email-->
    <!--        LEFT OUTER JOIN tbl_like C-->
    <!--        ON A.board_no = C.board_no AND C.like_email = #{email}-->
    <!--        WHERE A.board_no = C.board_no-->
    <!--        IN (SELECT board_no-->
    <!--        FROM tbl_like WHERE like_email = #{email})-->
    <!--        ORDER BY reg_date DESC-->
    <!--        LIMIT #{page.pageStart}, #{page.amount}-->


    <!-- 좋아요 기능과 관련된 sql문   -->
    <delete id="delete">
        DELETE FROM tbl_board
        WHERE board_no = #{bno}
    </delete>

    <select id="findLike" resultType="boolean">
        SELECT
            count(*)
        FROM tbl_like
        WHERE board_no = #{bno} AND like_email = #{email}
    </select>

    <insert id="insertLike">
        INSERT INTO tbl_like (
            like_email, board_no
        )
        VALUES (
            #{email}, #{bno}
        )
    </insert>

    <delete id="deleteLike">
        DELETE FROM tbl_like
        WHERE board_no = #{bno} AND like_email = #{email}
    </delete>

    <delete id="deleteReply">
        DELETE FROM tbl_reply
        WHERE reply_no = #{rno}
    </delete>

    <select id="findReply" resultType="boolean">
        SELECT COUNT(*) FROM tbl_reply
        WHERE reply_no = #{rno} AND email = #{email}
    </select>

    <select id="findBestOOTD" resultType="board">
        SELECT
            A.*, B.profile_image, B.nickname, C.like_no, C.like_email
        FROM tbl_board A
        LEFT OUTER JOIN tbl_member B
        ON A.email = B.email
        LEFT OUTER JOIN tbl_like C
        ON A.board_no = C.board_no AND C.like_email = #{email}
        ORDER BY like_count DESC
        LIMIT 0, 8
    </select>

<!--      갯수 찾아오는 건 컬렉션 size()로 정함  -->
<!--     my-history 에서 내가 쓴 글 갯수 찾아오는 sql문 -->
    <select id="findAllMyPostsCount" resultType="int">
        SELECT COUNT(*) FROM tbl_board
        WHERE email = #{email}
    </select>

    <select id="findAllMyComments" resultType="int">
        SELECT COUNT(*)
        FROM tbl_board A
        LEFT OUTER JOIN tbl_member B
        ON A.email = B.email
        WHERE board_no
        IN (SELECT board_no FROM tbl_reply WHERE email = #{email})
    </select>

    <!-- my-history 에서 내가 좋아요 누른 글 목록 조회(버튼 눌렀을 때)시 사용되는 sql문
    (내가 누른 좋아요 게시물의 총 갯수를 조회한다. -->
    <select id="findMyLikeCount" resultType="int">
        SELECT COUNT(*)
        FROM tbl_like WHERE like_email = #{email}
    </select>



    <delete id="deleteReplyToBno">
        DELETE FROM tbl_reply
        WHERE board_no = #{bno}
    </delete>

    <delete id="deleteLikeToBno">
        DELETE FROM tbl_like
        WHERE board_no = #{bno}
    </delete>

    <update id="modifyReply">
        UPDATE tbl_reply
        SET content = #{content}
        WHERE reply_no = #{rno}
    </update>

</mapper>